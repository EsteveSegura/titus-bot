<!DOCTYPE html>
<html lang="es">

<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <meta http-equiv="X-UA-Compatible" content="ie=edge">
     <link href="<%=css%>" rel="stylesheet">
     <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-toast-plugin/1.3.2/jquery.toast.css">
     <title>Chat</title>
</head>

<body>

     <div id="flash" class="flash-off">

     </div>
     <audio id="alertAudio">
          <source src="<%=audio%>" type="audio/wav">
     </audio>
     <div class="text-center fixed-top">
          <div class="admin">
               <div class="info-container">
                    <div class="info-element">
                         <span class="info-key">views:</span>
                         <span class="info-value" id="viewers-info"> <span style="font-size:9px">Esperando info</span>
                         </span>
                    </div>
                    <div class="info-element">
                         <span class="info-key">type:</span>
                         <span class="info-value" id="type-info"><span style="font-size:9px">Esperando info</span>
                         </span>
                    </div>
               </div>
               <input id="check-subMode" type="checkbox" class="subMode" name="field" value="option" checked>
               <label for="check-subMode" class="text-subMode">¡Modo sub!</label>
               <br>
               <button id="initchat" onclick="initChat()">Iniciar chat de voz</button>
          </div>
     </div>
          <div id="chat" class="chat">
          <div class="badge-chat d-flex flex-row">

          </div>
     </div>

     <div class="warn">
          <div class="badge-warn flex-row">


               <div class="warn-title">¡ALERTA!</div>
               <div class="warn-message">Para empezar a mostrar y escuchar mensajes pulsa "Iniciar chat de voz"</div>
               <div class="warn-btn-close">
                    <div id="warn" class="warn-btn-text">
                         Ok, lo he leido
                    </div>
               </div>
          </div>
     </div>


     <div id="new-messages" class="new-messages text-center hide"> Ver mensajes nuevos</div>

     <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
     <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
     <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
     <script src="http://code.responsivevoice.org/responsivevoice.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-toast-plugin/1.3.2/jquery.toast.min.js"></script>
     <script>
          let socket = io.connect('<%=socket%>');
          let messagesQueue = []
          let subMode = true;
          let permisions = false;
          let sound = document.getElementById("alertAudio");
          let canGoTobottom = true
          let newMessages = $("#new-messages")

          function playAlert() {
               sound.play();
          }

          window.onscroll = function (ev) {
               if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
                    canGoTobottom = true
                    console.log("you're at the bottom of the page");
                    $("#new-messages").addClass("hide")
               }else{
                    canGoTobottom = false
                    $("#new-messages").removeClass("hide")
               }
          };

          $("#new-messages").click((e) =>{
               $(document).scrollTop($(document).height());
               canGoTobottom = true
               $("#new-messages").addClass("hide")
          })


          $("#check-subMode").change(function () {
               if (this.checked) {
                    subMode = true;
               } else {
                    subMode = false;
               }
          });

          $("#warn").click(() => {
               $('#warn').parents(".warn").remove();
          })

          socket.on('voiceChat', async (data) => {
               if (permisions) {
                    //console.log(data);
                    addNewMessageInChat(data.body.author, data.body.message, data.body.badge)

                    if (canGoTobottom) {
                         $(document).scrollTop($(document).height());//Scroll bottom
                    }

                    if (data.body.message.startsWith("! ")) {
                         if (subMode) {
                              if (data.body.isSuscriber) {
                                   messagesQueue.push(data.body.message.substr(1))
                              }
                         } else {
                              messagesQueue.push(data.body.message.substr(1))
                         }
                    }
               }
          });

          socket.on('resub', async (data) => {
               if (permisions) {
                    console.log(data)
                    console.log("RESUB de" + data.body.username)
                    addNewAlertInChat("ReSub", `${data.body.username} se ha resuscrito ${data.body.months} meses, acumulando un total de ${data.body.cumulativeMonths} meses de subscripción, y su mensaje es ${data.body.message}`)
                    messagesQueue.push(`${data.body.username} se ha resuscrito, acumulando un total de ${data.body.cumulativeMonths} meses de subscripción, y su mensaje es ${data.body.message} --Alert--`)
               }
          });

          socket.on('subgift', async (data) => {
               if (permisions) {
                    //console.log(data)
                    addNewAlertInChat("Regalo de sub", `${data.body.username} ha regalado una subscripción a ${data.body.recipient}`)
                    messagesQueue.push(`${data.body.username} ha regalado una subscripción a ${data.body.recipient} --Alert--`)
               }
          });

          socket.on('submysterygift', async (data) => {
               if (permisions) {
                    //console.log(data)
               }
          });

          socket.on('subscription', async (data) => {
               if (permisions) {
                    //console.log(data)
                    addNewAlertInChat("Subscripción", `${data.body.username} se ha suscrito, con el mensaje:${data.body.message}`)
                    messagesQueue.push(`${data.body.username} se ha suscrito, con el mensaje:${data.body.message} --Alert--`)
               }
          });

          socket.on('infoAboutStream', async (data) => {
               $("#viewers-info").html(data.body.viewer_count)
               $("#type-info").html(data.body.type)
               console.log(data)

          })

          socket.on('cheer', async (data) => {
               if (permisions) {
                    //console.log(data)
                    addNewAlertInChat("Cheer", `${data.body.username} ha dejado ${data.body.howManyBits} bits, con el mensaje:${data.body.message}`)
                    messagesQueue.push(`${data.body.username} ha dejado ${data.body.howManyBits} bits, con el mensaje:${data.body.message} --Alert--`)
               }
          });

          socket.on('hosted', async (data) => {
               if (permisions) {
                    //console.log(data)
                    addNewAlertInChat("Host", `${data.body.username} ha hosteado con ${data.body.viewers} personas`)
                    messagesQueue.push(`${data.body.username} ha hosteado con ${data.body.viewers} personas --Alert--`)

               }
          });

          socket.on('raided', async (data) => {
               if (permisions) {
                    //console.log(data)
                    addNewAlertInChat("Raid", `${data.body.username} ha raideado con ${data.body.viewers} personas`)
                    messagesQueue.push(`${data.body.username} ha raideado con ${data.body.viewers} personas --Alert--`)

               }
          });

          function addNewMessageInChat(user, message, badge) {
               const availablebadges = {
                    sub: './img/sub.svg',
                    user: './img/user.svg',
               }
               let actualbadge = null
               if (typeof badge == "undefined" || typeof badge == "null") {
                    console.log("No tiene placa en el chat")
               } else {
                    if (badge != {}) {
                         try {
                              switch (Object.keys(badge)[0]) {
                                   case 'subscriber':
                                        actualbadge = availablebadges.sub;
                                        break;

                                   default:
                                        actualbadge = null;
                                        break;
                              }

                         } catch (error) {
                              console.log("Something went wrong, but we keep going forward!")
                              actualbadge = availablebadges.user;
                         }
                    }
               }

               let template = `<div class="badge-chat d-flex flex-row">
               <div class="show-badge"> <img class="badge" src="${actualbadge}" alt="chat badge" ></div>
               <div class="user-chat">${user}:</div>
               <div class="message-chat">${message}</div>
               </div>`
               $("#chat").append(template)
          }

          function addNewAlertInChat(event, message) {
               let template = `<div class="alert-in-chat d-flex flex-row">
                    <div class="alert-chat"><strong>${event}</strong> ${message} </div>
               </div>`
               $("#chat").append(template)
          }

          async function talk(message) {
               return new Promise(async (resolve, reject) => {
                    if (permisions) {
                         responsiveVoice.speak(message, "Spanish Female", { onend: resolve })
                    }
               })
          }

          async function flashOnScreen(iterations) {
               let flashElement = document.getElementById('flash')
               for (let i = 0; i < iterations; i++) {
                    flashElement.classList.add('flash')
                    flashElement.classList.add('fixed-top')

                    await wait(10);
                    flashElement.classList.remove('flash')
                    flashElement.classList.remove('fixed-top')
                    await wait(10);
               }
          }


          function initChat() {
               permisions = true;
               responsiveVoice.speak("Chat de voz activado", "Spanish Female");
               addNewMessageInChat('¡Chat inciado!', 'Conexión con exito.', {})
               $("#initchat").remove()
          }

          async function wait(ms) {
               return new Promise(async (resolve, reject) => {
                    setTimeout(() => {
                         resolve("TIME_DONE")
                    }, ms);
               })
          }
          /*
          $.toast({
               heading: 'Una notificación nueva',
               text: 'Una persona nueva te ha seguido',
               hideAfter: 60000,
               icon: 'success'
          });*/

          (async () => {
               while (true) {
                    await wait(1000)
                    if (messagesQueue.length != 0) {
                         console.log(messagesQueue.length)
                         if (messagesQueue[0].includes('--Alert--')) {
                              messagesQueue[0] = messagesQueue[0].replace('--Alert--', '')
                              playAlert()
                         }
                         await talk(messagesQueue[0])
                         messagesQueue.shift()
                    }
               }
          })()


     </script>
</body>

</html>



<!--
$.toast({
    heading: 'Can I add <em>icons</em>?',
    text: 'Yes! check this <a href="https://github.com/kamranahmedse/jquery-toast-plugin/commits/master">update</a>.',
    hideAfter: false,
    icon: 'success'
})



-->