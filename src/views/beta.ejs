<!DOCTYPE html>
<html lang="es">

<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <meta http-equiv="X-UA-Compatible" content="ie=edge">
     <link href="<%=css%>" rel="stylesheet">
     <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
     <title>Chat</title>
</head>

<body>
     <audio id="alertAudio">
          <source src="./audio/Alert.wav" type="audio/wav">
     </audio>
     <div class="text-center fixed-top">
          <div class="admin">
               <input id="check-subMode" type="checkbox" class="subMode" name="field" value="option" checked>
               <label for="check-subMode" class="text-subMode"><span><span></span></span>¡Modo sub!</label>
               <br>
               <button id="initchat" onclick="initChat()">Iniciar chat de voz</button>
          </div>
     </div>
     <div id="chat" class="chat">
          <div class="badge-chat d-flex flex-row">

          </div>
     </div>

     <div class="warn">
          <div class="badge-warn flex-row">
               <div class="warn-title">¡ALERTA!</div>
               <div class="warn-message">Para empezar a mostrar y escuchar mensajes pulsa "Iniciar chat de voz"</div>
               <div class="warn-btn-close">
                    <div id="warn" class="warn-btn-text">
                         Ok, lo he leido
                    </div>
               </div>
          </div>
     </div>

     <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
     <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
     <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
     <script src="http://code.responsivevoice.org/responsivevoice.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>

     <script>
          let socket = io.connect('<%=socket%>');
          let messagesQueue = []
          let subMode = true;
          let permisions = false;
          let sound = document.getElementById("alertAudio");

          function playAlert() {
               sound.play();
          }
 
          
          $("#check-subMode").change(function () {
               if (this.checked) {
                    subMode = true;
               } else {
                    subMode = false;
               }
          });

          $("#warn").click(() => {
               $('#warn').parents(".warn").remove();
          })

          socket.on('voiceChat', async (data) => {
               if (permisions) {
                    //console.log(data);
                    addNewMessageInChat(data.body.author, data.body.message)
                    $(document).scrollTop($(document).height());//Scroll bottom

                    if (data.body.message.startsWith("! ")) {
                         if (subMode) {
                              if (data.body.isSuscriber) {
                                   messagesQueue.push(data.body.message.substr(1))
                              }
                         } else {
                              messagesQueue.push(data.body.message.substr(1))
                         }
                    }
               }
          });

          socket.on('resub', async (data) => {
               if (permisions) {
                    console.log(data)
                    if (data.body.userstate["msg-param-should-share-streak"]) {
                         addNewAlertInChat("ReSub", `${data.body.username} se ha resuscrito ${data.body.months} meses, acumulando un total de ${data.body.cumulativeMonths} meses de subscripción, y su mensaje es ${data.body.message}`)
                         messagesQueue.push(`${data.body.username} se ha resuscrito ${data.body.months} meses, acumulando un total de ${data.body.cumulativeMonths} meses de subscripción, y su mensaje es ${data.body.message} --Alert--`)
                    } else {
                         addNewAlertInChat("ReSub", `${data.body.username} se ha resuscrito, acumulando un total de ${data.body.cumulativeMonths} meses de subscripción, y su mensaje es ${data.body.message}`)
                         messagesQueue.push(`${data.body.username} se ha resuscrito, acumulando un total de ${data.body.cumulativeMonths} meses de subscripción, y su mensaje es ${data.body.message} --Alert--`)
                    }
               }
          });

          socket.on('subgift', async (data) => {
               if (permisions) {
                    console.log(data)
                    addNewAlertInChat("Regalo de sub", `${data.body.username} ha regalado una subscripción a ${data.body.recipient}`)
                    messagesQueue.push(`${data.body.username} ha regalado una subscripción a ${data.body.recipient} --Alert--`)
               }
          });

          socket.on('submysterygift', async (data) => {
               if (permisions) {
                    console.log(data)
               }
          });

          socket.on('subscription', async (data) => {
               if (permisions) {
                    console.log(data)
                    addNewAlertInChat("Subscripción", `${data.body.username} se ha suscrito, con el mensaje:${data.body.message}`)
                    messagesQueue.push(`${data.body.username} se ha suscrito, con el mensaje:${data.body.message} --Alert--`)
               }
          });

          socket.on('cheer', async (data) => {
               if (permisions) {
                    console.log(data)
                    addNewAlertInChat("Cheer", `${data.body.username} ha dejado ${data.body.howManyBits} bits, con el mensaje:${data.body.message}`)
                    messagesQueue.push(`${data.body.username} ha dejado ${data.body.howManyBits} bits, con el mensaje:${data.body.message} --Alert--`)
               }
          });

          socket.on('hosted', async (data) => {
               if (permisions) {
                    console.log(data)
                    addNewAlertInChat("Host", `${data.body.username} ha hosteado con ${data.body.viewers} personas`)
                    messagesQueue.push(`${data.body.username} ha hosteado con ${data.body.viewers} personas --Alert--`)

               }
          });

          socket.on('raided', async (data) => {
               if (permisions) {
                    console.log(data)
                    addNewAlertInChat("Raid", `${data.body.username} ha raideado con ${data.body.viewers} personas`)
                    messagesQueue.push(`${data.body.username} ha raideado con ${data.body.viewers} personas --Alert--`)

               }
          });

          function addNewMessageInChat(user, message) {
               let template = `<div class="badge-chat d-flex flex-row">
               <div class="user-chat">${user}:</div>
               <div class="message-chat">${message}</div>
               </div>`
               $("#chat").append(template)
          }

          function addNewAlertInChat(event, message) {
               let template = `<div class="badge-chat d-flex flex-row">
                    <div class="alert-chat"><strong>${event}</strong> ${message} </div>
               </div>`
               $("#chat").append(template)
          }

          async function talk(message) {
               return new Promise(async (resolve, reject) => {
                    if (permisions) {
                         responsiveVoice.speak(message, "Spanish Female", { onend: resolve })
                    }
               })
          }

          function initChat() {
               permisions = true;
               responsiveVoice.speak("Chat de voz activado", "Spanish Female");
               addNewMessageInChat('¡Chat inciado!', 'Conexión con exito.')
               $("#initchat").remove()
          }

          async function wait(s) {
               return new Promise(async (resolve, reject) => {
                    setTimeout(() => {
                         resolve("TIME_DONE")
                    }, 1000 * s);
               })
          }

          (async () => {
               while (true) {
                    await wait(1)
                    if (messagesQueue.length != 0) {
                         console.log(messagesQueue.length)
                         if(messagesQueue[0].includes('--Alert--')){
                              messagesQueue[0] = messagesQueue[0].replace('--Alert--','')
                              playAlert()
                         }
                         await talk(messagesQueue[0])
                         messagesQueue.shift()
                    }
               }
          })()
     </script>
</body>

</html>